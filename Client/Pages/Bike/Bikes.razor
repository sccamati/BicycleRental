@page "/bikes"
@inject IBikeService BikeService
@inject IBikesTypeService BikesTypeService
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager

<h3>Bikes</h3>
<AuthorizeView Roles="Admin, Owner">
    <button class="btn btn-primary" @onclick="() => NavigateToAddBike()">Add bike</button>
</AuthorizeView>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Serial Number</th>
            <th>Brand</th>
            <th>Availability</th>
            <th>Production Date</th>
            <th>Type</th>
            <th>Price Per Hour</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var rental in bikes)
        {
            <tr>
                <td>@rental.SerialNumber</td>
                <td>@rental.Brand</td>
                <td>@IsBorrowed(rental.IsBorrowed)</td>
                <td>@rental.ProductionDate</td>
                <td>@rental.BikesType.Name</td>
                <td>@rental.PricePerHour</td>

                <td>
                    <button class="btn btn-warning" @onclick="() => NavigateToDetails(rental)">Details</button>
                    <AuthorizeView Roles="Admin, Owner">
                        <button class="btn btn-primary" @onclick="() => NavigateToEdit(rental)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => Delete(rental)">Delete</button>
                    </AuthorizeView>

                </td>
            </tr>
        }
    </tbody>
</table>

@code {

    private List<BikeDto> bikes = new List<BikeDto>();

    protected override async Task OnInitializedAsync()
    {
        bikes = await BikeService.GetAllAsync("api/bike/allBikes");
    }

    private string IsBorrowed(bool borrowed)
    {
        return borrowed ? "Rented" : "Available";
    }

    protected async Task Delete(BikeDto bike)
    {
        var result = await BikeService.DeleteByIdAsync("api/bike", bike.Id);

        if (result)
        {
            bikes.Remove(bike);
        }
        else
        {
            Toaster.Add("Error during remove bike. Try Again", MatToastType.Danger);
        }
    }

    protected async Task NavigateToDetails(BikeDto bike)
    {
        BikeService.Bike = await BikeService.GetByIdAync("api/bike", bike.Id);
        NavigationManager.NavigateTo($"bikeDetails/{bike.Id}");
    }

    protected async Task NavigateToEdit(BikeDto bike)
    {
        BikeService.Bike = await BikeService.GetByIdAync("api/bike", bike.Id);
        BikesTypeService.Types = await BikesTypeService.GetAllAsync("api/bikesType");
        NavigationManager.NavigateTo($"editBike/{bike.Id}");
    }

    protected async Task NavigateToAddBike()
    {
        BikesTypeService.Types = await BikesTypeService.GetAllAsync("api/bikesType");
        NavigationManager.NavigateTo($"addBike");
    }
}