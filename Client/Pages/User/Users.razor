@page "/users"
@inject IUserService UserService
@inject IRoleService RoleService
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager
<PageTitle>Users</PageTitle>

<h3>Users</h3>

<MatTable Items="@UserService.Users" class="mat-elevation-z5" FilterByColumnName="Email">
    <MatTableHeader>
        <th>Email</th>
        <th>Role</th>
        <th>Actions</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Email</td>
        <td>@context.Role.Name</td>
        <td>
            <button class="btn btn-primary" @onclick="() => NavigateToEdit(context)">Edit</button>
            <button class="btn btn-danger" @onclick="() => DeleteUser(context)">Delete</button>
            <button class="btn btn-warning" @onclick="() => NavigateToDetails(context)">Details</button>
        </td>
    </MatTableRow>
</MatTable>

@code {

    protected override async Task OnInitializedAsync()
    {
        UserService.Users = await UserService.GetAllAsync("api/user");
    }

    protected async Task DeleteUser(UserDto user)
    {
        var result = await UserService.DeleteByIdAsync("api/user", user.Id);

        if (result)
        {
            UserService.Users.Remove(user);
        }
        else
        {
            Toaster.Add("Error during remove user. Try Again", MatToastType.Danger);
        }
    }
    protected async Task NavigateToEdit(UserDto user)
    {
        UserService.User = user;
        RoleService.Roles = await RoleService.GetAllAsync("api/role");
        NavigationManager.NavigateTo($"editUser/{user.Id}");
    }

    protected async Task NavigateToDetails(UserDto user)
    {
        UserService.User = user;
        RoleService.Roles = await RoleService.GetAllAsync("api/role");
        NavigationManager.NavigateTo($"userDetails/{user.Id}");
    }

}
